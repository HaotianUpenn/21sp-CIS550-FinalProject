{"ast":null,"code":"var _jsxFileName = \"/Users/z20171126/21sp-CIS550-HaotianUpenn/hw2/client/src/components/Posters.js\";\nimport React from 'react';\nimport '../style/Dashboard.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PageNavbar from './PageNavbar';\nimport PostersBlock from './PostersBlock';\nexport default class Posters extends React.Component {\n  constructor(props) {\n    super(props); // The state maintained by this React Component. This component maintains the list of genres,\n    // and a list of movies for a specified genre.\n\n    this.state = {\n      movies: []\n    };\n  } // React function that is called when the page load.\n\n\n  componentDidMount() {\n    // Send an HTTP request to the server.\n    let poster;\n    fetch(\"http://localhost:8081/posters\", {\n      method: 'GET' // The type of HTTP request.\n\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(res => {\n      return res.map(temp => this.getapi(temp.imdb_id)), res;\n    }, err => {\n      console.log(err);\n    }).then(function (apires, sqlres) {\n      //if (!genreList) return;\n      // Map each genreObj in genreList to an HTML element:\n      // A button which triggers the showMovies function for each genre.\n      // let genreDivs = genreList.map(function (MoviePosters, i) {\n      //   let m_id = MoviePosters.imdb_id;\n      //   let jumpurl = \"https://www.imdb.com/title/\" + m_id;\n      //   let tempatg  = fetch()\n      // });\n      console.log(apires);\n      console.log(sqlres); // this.setState({\n      //   movies: genreDivs\n      // });\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n  }\n\n  getapi(id) {\n    return fetch(\"http://www.omdbapi.com/?i=\" + id + \"&apikey=28dd6ee\", {\n      method: 'GET' // The type of HTTP request.\n\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(apiresult => {}, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PageNavbar, {\n      active: \"dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container movies-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, \"Posters\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"genres-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, this.state.movies))));\n  }\n\n}","map":{"version":3,"sources":["/Users/z20171126/21sp-CIS550-HaotianUpenn/hw2/client/src/components/Posters.js"],"names":["React","PageNavbar","PostersBlock","Posters","Component","constructor","props","state","movies","componentDidMount","poster","fetch","method","then","res","json","err","console","log","map","temp","getapi","imdb_id","apires","sqlres","id","apiresult","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../style/Dashboard.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PageNavbar from './PageNavbar';\nimport PostersBlock from './PostersBlock';\n\n\nexport default class Posters extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // The state maintained by this React Component. This component maintains the list of genres,\n    // and a list of movies for a specified genre.\n    this.state = {\n      movies: []\n    }\n  }\n\n  // React function that is called when the page load.\n  componentDidMount() {\n    // Send an HTTP request to the server.\n    let poster;\n    fetch(\"http://localhost:8081/posters\",\n      {\n        method: 'GET' // The type of HTTP request.\n      }).then(res => {\n        // Convert the response data to a JSON.\n        return res.json();\n      }, err => {\n        // Print the error if there is one.\n        console.log(err);\n      }).then(res =>{\n        return res.map( temp=>this.getapi(temp.imdb_id)),res\n      },err =>{\n        console.log(err);\n      }\n      ).then(function (apires,sqlres) {\n        //if (!genreList) return;\n        // Map each genreObj in genreList to an HTML element:\n        // A button which triggers the showMovies function for each genre.\n  \n        // let genreDivs = genreList.map(function (MoviePosters, i) {\n        //   let m_id = MoviePosters.imdb_id;\n        //   let jumpurl = \"https://www.imdb.com/title/\" + m_id;\n        //   let tempatg  = fetch()\n          \n        // });\n        console.log(apires);\n        console.log(sqlres);\n        // this.setState({\n        //   movies: genreDivs\n        // });\n\n      }, err => {\n        // Print the error if there is one.\n        console.log(err);\n      });\n\n  }\n\n\n  getapi(id) {\n    return fetch(\"http://www.omdbapi.com/?i=\" + id + \"&apikey=28dd6ee\",\n        {\n          method: 'GET' // The type of HTTP request.\n        }).then(res => {\n          // Convert the response data to a JSON.\n          return res.json();\n        }, err => {\n          // Print the error if there is one.\n          console.log(err);\n        }).then(apiresult => {\n          \n        }, err => {\n          // Print the error if there is one.\n          console.log(err);\n        });\n}\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n\n        <PageNavbar active=\"dashboard\" />\n\n        <br></br>\n        <div className=\"container movies-container\">\n          <div className=\"jumbotron\">\n            <div className=\"h5\">Posters</div>\n            <div className=\"genres-container\">\n              {this.state.movies}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}